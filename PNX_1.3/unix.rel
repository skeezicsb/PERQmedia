







                     
                     
                     
                     
                        Release Notes
                        
                        PNX Release 1.0
                        
                        8 April 1983
                        
                        




Preface
      
     This document describes Release 1 of the PNX operating system.
     PNX is ICL's implementation of UNIX* on PERQ*.  It is fully
     defined in Guide to PNX and the Unix Programmer's Manual
     published by Bell Labs and available from 3RCC.
      
     This is a Controlled Release of PNX.

   * UNIX is a registered trade mark of Bell Laboratories.
   * PERQ is a registered trade mark of Three Rivers Computer Corp.

     The contents of this document are:

     1.  Introduction.
     2.  Floppy Disk Set.
     3.  Documentation.
     4.  Changes from earlier versions.
     5.  Release Contents.
     6.  Installing PNX.
     7.  Transfers between POS and PNX.
     8.  Support of floppy disks in PNX.
     9.  System Support.
     10. Known errors.
     11. Power up and power down sequences.
     12. Repairing filestore corruption.

     Appendix.  Known errors and restrictions.


1.  INTRODUCTION.

     This document provides a complete definition of the release of PNX
     version 1, and the associated documentation.  It also contains 
     instructions on how to install PNX from the floppy disks and a list of
     known restrictions.
     
     The contents of this release are
     
          A set of floppy disks
          A set of Z80 proms
          This Release Notice
          PERQ Overview
          Guide to PNX
          UNIX Programmer's Manual Vol.1
          UNIX Programmer's Manual Vol.2A
          UNIX Programmer's Manual Vol.2B
     
     PNX runs on 1/2Mb and 1Mb PERQ systems.  It does not support the Ethernet
     or Link board options.



2.  FLOPPY DISK SET.

     PNX Release 1 is released on 9 floppy disks.  They are:

          Disk Label          Contents

          PNX 0.1             Boot floppy and Basic System
          PNX 1.1             C Compiler
          PNX 2.1             C language support
          PNX 3.1             Utilities
          PNX 4.1             Utilities
          PNX 5.1             Manual
          PNX 6.1             Manual
          PNX 7.1             Manual
          PNX 10.1            Spell
     
     WARNING:   Floppy disks may be corrupted if placed on the tablet


3.  DOCUMENTATION.

     PERQ Overview
     Guide to PNX, edition 1
     UNIX Programmer's Manual vol 1.
     UNIX Programmer's Manual vol 2a.
     UNIX Programmer's Manual vol 2b.
     
     The UNIX Programmer's Manual can also be obtained from Bell labs.


3.  CHANGES FROM EARILER VERSIONS.

     This is the first controlled release of PNX. PNX and POS are not compatible.
     Section 7 of this document details how material may be transferred from POS 
     to PNX.


4.  RELEASE CONTENTS.

     Guide to PNX defines the system made available with this release,
     with the following exceptions:-
     The utilities F77 (the Fortran 77 compiler), struct and ratfor are not included
     in this release.
     The utility learn is not included in this release.
     The utilitiy refer is available with this release.


     
     The method for setting up floppy disks does not work as described in Guide
     to PNX.
     The utilities mkflop and rkfs have been issued to cover this; see section
     8 for further details.



5.  INSTALLING PNX.

     NOTE:  PNX will run only with versions 8.5 or 8.71 of the Z80 proms. If the
     revision level of the Z80 proms on the IO board is not correct, verify the
     board revision level with 3RCC Field Service before installing the enclosed
     proms. Failure to do so may result in corruption of the hard disk.
     

     
     INSTALLING PNX FOR THE FIRST TIME.

     1) Put a write enable tab on the boot floppy by covering the notch at the
        lower right of the cover with a sticky tab.
     2) Put the Boot Floppy in the drive and boot the PERQ.  (See section 11).
        Ignore any messages 'Error on Floppy Disk, Status=1'.
     3) Type 'makeunix'.  PNX will now set up the fixed disk.
        This stage will take c. 20 mins.  Ignore any messages with refer to 
        'bad format'.
     4) Follow the power down sequence (see section 11) but do not switch off.
     5) Remove the boot floppy and re-boot the PERQ.  PNX will come on-line.
     6) Insert disk 1 and type 'prime'.
        PNX will copy the contents of the floppy to the hard disk (c. 5 mins).
     7) Repeat step 9 for disks 2, 3, 4 and 5. 
     8) If the program 'man' is required, repeat step  9 for disks 6 and 7.
        If the 'spell' programmes are required, repeat step 9 for disk 10.
     
     PNX is now ready for use. 

     
     
     UPGRADING YOUR CURRENT PNX SYSTEM.

     1) Put a write enable tab on the boot floppy by covering the notch at the
        lower right of the cover with a sticky tab.
     2) Put the Boot Floppy in the drive and boot the PERQ.  (See section 11).
        Ignore any messages 'Error on Floppy Disk, Status=1'.
     3) Type 'updateunix'.  PNX will copy the contents of the floppy to the hard
        disk.  This will take c. 15 mins.  If you are repeating this stage ignore
        any messages 'mkdir, cannot make ...'.
     4) Follow the  power down sequence (see section 11) but do not switch off.
     5) Remove the boot floppy and re-boot the PERQ.  PNX will come on-line.
     6) Insert disk 1 and type 'prime'.
        PNX will copy the contents of the floppy to the hard disk (c. 5 mins).
     7) Repeat step 9 for disks 2, 3, 4 and 5.
     8) If the program 'man' is required, repeat step 9 for disks 6 and 7.
        If the 'spell' programmes are required,  repeat step 9 for disk 10.
     
     PNX is now ready for use.
     
     Note:   whenever PNX is booted it first comes up in single-user mode. 
     No work should be run in this mode except 'fsck' (see section 12).



7.  TRANSFERS BETWEEN POS AND PNX.

     POS and PNX are not compatible; if PNX is installed on a PERQ that 
     supports POS, the hard disk is reformatted and all the file store is lost.
     Text files may be transferred from POS to PNX via floppy disk.
     PNX supports POS format floppy disks by the new utility '/etc/fl';
     this is essentially the same as the POS utility 'floppy', and is used
     in the same way.  It supports the following commands:-
          format
          directory
          zero
          get filel (file2)
          put filel (file2)
          quit
          sget filel (file2)
          verify 
          check
          
     and the switches /singlesided  and  /doublesided.

     sget is used for copying text files; it removes embedded <CR>s
     which are not required by Unix.

     verify writes to every block on the disk and then reads it back.
     check reads from every block on the disk to check that this is possible.
     (But see appendix, U80)

     Warning :- PNX and fl do not support doubledensity floppies.
     Floppies manufactured as double density must be formatted as single density.

     Graphic image files (such as fonts and cursors) may be transferred from POS
     to PNX without change.  Other binary files will not, in general, be compatible.
     
     If text files are taken from PNX to POS, then the utility 'expandtabs'should
     be used and the line terminator should be changed from LF to CR by use of 
     the POS editor.



8.  SUPPORT OF FLOPPY DISKS IN PNX.



     1) Floppy disks should be initialized to PNX format by the utility '/etc/fl/'.
     Put the disk in the drive ensuring that the write permit notch has been masked;
     format and zero the floppy disk; quit fl.  Now type 'mkflop' to set up the 
     disk.
     
     2) To use the disk, type 'mountflop'.  The disk is now mounted in the 
     filestore in directory /fd.  Files of all types including directories may be 
     placed here.  When use of the floppy disk has finished type 'umountflop';
     the floppy disk may now be removed from the drive.  Do not use the directory
     /fd at other times.
     
     3) PLEASE NOTE THE RESTRICTIONS WITH THIS RELEASE.  Floppy disk access must
     be carried out when no RS232 or GPIB activity is taking place.  The tablet
     is a GPIB activity so either the puch should be removed from the tablet
     or window manager should be closed down.



9.  SYSTEM SUPPORT.

     1) All support matters should be reported to 3RCC Software Support Services.

     2) Should a system crash occur, this will be detected by a '@' character at 
     the bottom left of the screen.  If this occurs you should type 'a<return>'
     (possibly several times).  If the system does not restart, it will have to
     be re-booted.  (See also Section 11).


10. KNOWN ERRORS AND RESTRICTIONS.

     See Appendix for known errors.

     C PROGRAMS COMPILED UNDER THIS RELEASE WILL REQUIRE RECOMPILATION UNDER
     THE NEXT RELEASE OF PNX.  It is not anticipated that source changes will be
     necessary.



     ERRATA IN Guide to PNX.

     Section A1.4 page A1-4.
     Line 27 - replace NO by YES as refer is available with PNX.

     Section A2 page A2-35.
     Line 27 - delete 'of' so that line reads
     'short ROPDstInc   ;   /* destination line inc   */'

     Section A2 page A2-39.
     Last line - '/dev/rflop' should read '/dev/rawflop'.
          
     Section 3.1.4.1 Page 3-5.
     Append to this section the following:-
     VT100 compatible 'intelligent vdu' functions have been implemented.
     The following character combinations have special effects when 
     written to the screen.
     ESC X <32+n>   - Go to line n
     ESC Y <32+n>   - Go to column n
     ESC K          - Clear the screen and go to line 0 column 0.
     ESC <other>    - is ignored.
     Line and column spacings are those of the standard font.
     
     The Window Manager Escape keystroke is <CTRL & RETURN>.  This forces the
     cursor to the uncomitted state.  It is used to escape from a window if the
     cursor is in any mode other than CMAUTO.



11. POWER UP AND POWER DOWN

          A) Power up.

     1) Power on the PERQ.  After about 2 minutes the PERQ will start its bootstrap
     procedure.  If this fails, check the DDS (see Guide to PNX, Appendix 3).
     2) PNX will type 'single user     login'.  Type CTRL-Z.
     3) PNX will prompt for the date; type this in and confirm.
     4) PNX will prompt 'login'.  Type the required user name; if a password is
     required PNX will prompt for it; the password will not be echoed.  The super-
     user is root, password  root.
     5) PNX will prompt '#' if you are logged in as root or '$' for any other 
     user.  PNX is now ready for use.
     6) You can force the PERQ to reboot without switching it off by pressing the 
     button at the back of the keyboard.
     
          B) Power down.
     
     1) If you are logged in as an ordinary user, logout (by typing CRTL-Z) and
     login as the super-user.
     2) Type   'kill - l l'.  PNX will not prompt 'single user  login'.
     3) Log in as the super-user (root) and type 'sync'.
     4) Power the PERQ off.
     
     
12. REPAIRING FILESTORE CORRUPTION.

     If, for any reason, you have doubts about the integrity of the hard disk
     filestore, you should run 'fsck' as follows.
     
     1. Either folllow steps 1 and 2 of the power down sequence, OR
     re-boot PNX but do NOT type CTRL-Z.
     2. Login under user name root (password root).
     3. Type '/etc/fsck /dev/hard/'.
     4. This will detect and offer to correct any errors.  Correcting
     errors may cause some loss of data, but is generally the best course.
     
     Filestore faults are most likely to occur if the system crashes while running
     a program which writes to the hard disk.




APPENDIX

     This is the list of known errors for PNX Release 1, as of 23 Feb 83, classified
     under various headings.

     Index

          C 1-19  Program Development
          U 1- 7  Utilities
          K 1- 7  Kernel
          I 1- 6  I/O, RS232, GPIB



     Program Development:  CC, AS, LD

     C1/   The following illegal C program causes a compiler error...
 
               type def union {
                               int num;
                               } cell
                                cell [3];
               ; missing line 3

     C2/   The following lines of valid C code give
           "compiler error:  compiler takes size of function"
     
               char buf[100]
               int  (broken)();
               pip  ()
               {
               }
     
           Omit brackets round "broken"
     
     C3/   In the following lines of code, the external integer variables
           are initialized to zero, whereas on PDP11 they are initialized to a
           character pointer and a function pointer.
     
               do_something(meaningful)
               { 
                      printf("Answer = %d\n", meaningful);
               }
     
               int ext_cp = "TEST";
               int ext_fp = do_something;
     
               main()
               {
                      int loc_fp + "TEST";
                      int loc_fp = do_something;
     
                      printf("%s %s\n", loc_cp, ext_cp);
              
                      (*(int (*)())loc_fp)(42);
                      (*(int (*)())ext_fp)(42);
               }



     C4/   Items declared as double or as a structure are aligned on a 64-bit
           boundary.
     
     C5/  The following C code produces a compiler error...
     
               typedef struct {
                               int x;
                               int y;
                              }point;
               main()
               {
                       puts("TEST");
               }
     
     C6/   The following C program...
     
               #define BIGX 0 x 8000 0000
               main()
               {
                       printf("%x\n", BIGX);
               }
     
           ... prints 80000006.  Hex constants are incorrectly translated.
     
     C7/   The C compiler incorrectly generates the same code for static and 
           non-static functions.
     
     C8/   There is a general problem in two-dimensional array handling.
           e.g. the C compiler generates incorrect code for the 
           following source...
     
               main()
                           {
                           char b[8][8];
                           int  i,j;
                           .
                           .
                           .
                           b[i][j]; = `n`;
                           }
     
     C9/   The following C program causes the assembler to fail "value out
           of range   range"...
     
               main()
               {
                      register int x;
     
                      x <<= 0;
                      x >>= 0;
               }
     
     C10/  The C compiler/assembler allocates initialized data space for static
           arrays.



     C11/  The assembler will fail "value out of range" if the parameter to an 
           il is >54.  For example, the following C program causes the fault...
     
            fred (a)
            struct x{int b[68];} a;
            {
                    int i;
                    i = a.b[26];
            }
            main()
            {
            }
     
     C12/  The assembler may hang up if the source file is not properly terminated.
     
     C13/  The assembler does not support the "-" option.
     
     C14/  The assembler cannot cope with >64k of static initialized data in a 
           module
     
     C15/  SETJMP(3) may cause a VSI.
     
     C16/  Loader gives a bad flag with "-e" option.
     
     C17/  If a text segment is an exact multiple of 512 bytes, it will fail with
           a checksum error.
     
     C18/  An unsigned number is wrongly shifted right arithmetically instead of
           logically.
     
     C19/  The C compiler differentiates names up to 8 characters.  However, names
           which are external are limited to 7 characters.  This limitation is 
           imposed by the loader.
     
     
     UTILITIES
     
     U1/   FLOPPIES     The method of setting up floppy disks does not work 
                        as described in Guide to PNX.  The utilities "mkflop" and
                        "rkfs" have been issued to correct this discrepancy.
     
     U2/   LEARN        This utility is not included in this release.
                        Users of Field Trial systems are warned that it contains
                        errors which give rise to varying symptoms.
     
     U3/   DIFF         It may fail in certain, unknown, circumstances and 
                        give a "memory fault core dumped".



     U4/   $HOME        This is known to be corrupted in certain circumstances
                        and seems to involve the use of "export" in the users 
                        ".profile" file.
     
     U5/   ICHECK/FSCK  These give inconsistent results.  FSCK is correct.
     
     U6/   MOTD         This may not appear if the user has no mail.
     
     U7/   /ETC/FL      Messages concerning '/TMP/FLTEMP' and 'flushing
                        buffers' can safely be ignored.
     
     U8/   /ETC/FL      To use the commands 'verify' and 'check' it is 
                        necessary to make /dev/oflop first, using 
                        '/etc/mknod /dev/oflop b 1 3'.
     
     
     KERNEL & MICROCODE
     
     K1/   The function 'malloc' may take several seconds to execute
           when memory usage exceeds the physical size of store.
     
     K2/   Spurious floating point exceptions may occur under certain 
           circumstances during conversion between float and integer.
     
     K3/   The system may crash if you plugh the printer in while the 
           system is already running.
     
     K4/   Error messages generated by the KERNEL cause the entire screen
           (including windows) to rack up.  Select each window in turn to
           restore the windows.
     
     K5/   The maximum title lenght for a window is 70 characters.
     
     K6/   There are limitations on the use of large programs and large
           or multiple graphics screens on 512K byte machines.
     
     K7/   The system calls wrasop, wline and wgread all return the value
           1, if successful, instead of 0.
     
     K8/   If an attempt is made to access the second side of a single-sided
           floppy,the system may lock up and should be re-booted.  This can
           only happen if the floppy is being formatted or it is being accessed
           in raw mode from a user program.



     INPUT/OUTPUT, GPIB ,RS232
     
     I1/   Powering off of the tablet or other device on the GPIB may cause
           irrecoverable loss of the GPIB until the system is re-booted.
     
     I2/   Floppy access should not be made simultaneously with GPIB 
           (including tablet) or RS232.  Window manager should be shut
           down or the puck should be removed from the tablet.  Failure
           to do the above may cause data corruption on the floppy.
     
     I3/   The library routines putchar,putc (hence puts & fputs) use buffered
           output.  Therefore output may not appear on the screen or line 
           until a close or a flush is done. 
     
     I4/   Users should always check 'errno' for data loss on RS232 devices 
           as data loss may occur due to buffer overrun.  The error is
           reported as if data had been lost on the line.
     
     I5/   A restricted GPIB implementation is available.  Unreported data loss
           may occur.  This may be avoided by using a buffer size of less than
           16 bytes.  Since the SRQ is not transmitted to the PERQ, devices
           which send SRQ (when buffer full) may lose data.  

                          
          

                                                              